// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/rock_rpc.proto

package rock

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResponseType int32

const (
	ResponseType_HEARTBEAT ResponseType = 1
	ResponseType_MESSAGE   ResponseType = 2
)

var ResponseType_name = map[int32]string{
	1: "HEARTBEAT",
	2: "MESSAGE",
}

var ResponseType_value = map[string]int32{
	"HEARTBEAT": 1,
	"MESSAGE":   2,
}

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return proto.EnumName(ResponseType_name, int32(x))
}

func (x *ResponseType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResponseType_value, data, "ResponseType")
	if err != nil {
		return err
	}
	*x = ResponseType(value)
	return nil
}

func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_541ee187b8ff0cf0, []int{0}
}

type StreamRequest struct {
	Token                *string  `protobuf:"bytes,1,req,name=token" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_541ee187b8ff0cf0, []int{0}
}

func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type StreamResponse struct {
	CmdId                *uint32  `protobuf:"varint,1,opt,name=cmdId" json:"cmdId,omitempty"`
	Payload              *string  `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_541ee187b8ff0cf0, []int{1}
}

func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResponse.Unmarshal(m, b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return xxx_messageInfo_StreamResponse.Size(m)
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetCmdId() uint32 {
	if m != nil && m.CmdId != nil {
		return *m.CmdId
	}
	return 0
}

func (m *StreamResponse) GetPayload() string {
	if m != nil && m.Payload != nil {
		return *m.Payload
	}
	return ""
}

func init() {
	proto.RegisterEnum("rock.ResponseType", ResponseType_name, ResponseType_value)
	proto.RegisterType((*StreamRequest)(nil), "rock.StreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "rock.StreamResponse")
}

func init() { proto.RegisterFile("proto/rock_rpc.proto", fileDescriptor_541ee187b8ff0cf0) }

var fileDescriptor_541ee187b8ff0cf0 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xcf, 0xbf, 0x4b, 0xc4, 0x30,
	0x14, 0x07, 0x70, 0x53, 0x4e, 0x8e, 0x3e, 0xcd, 0x51, 0x62, 0x87, 0xe0, 0x54, 0x0a, 0x42, 0xb9,
	0xa1, 0x8a, 0xe0, 0x6e, 0x0f, 0xe2, 0x8f, 0xc1, 0x25, 0xe9, 0x2e, 0x25, 0x79, 0x83, 0xf4, 0xae,
	0x89, 0x69, 0x14, 0xfa, 0xdf, 0x1f, 0xbd, 0xd0, 0xa1, 0xe3, 0x27, 0xf9, 0x3e, 0xde, 0xf7, 0x41,
	0xee, 0xbc, 0x0d, 0xf6, 0xd1, 0x5b, 0xdd, 0x7f, 0x7b, 0xa7, 0xeb, 0x0b, 0xd9, 0x66, 0x76, 0xf9,
	0x00, 0x54, 0x05, 0x8f, 0xdd, 0x49, 0xe2, 0xef, 0x1f, 0x8e, 0x81, 0xe5, 0x70, 0x1d, 0x6c, 0x8f,
	0x03, 0x27, 0x45, 0x52, 0xa5, 0x32, 0xa2, 0x7c, 0x85, 0xdd, 0x12, 0x1b, 0x9d, 0x1d, 0x46, 0x9c,
	0x73, 0xfa, 0x64, 0x3e, 0x0d, 0x27, 0x05, 0xa9, 0xa8, 0x8c, 0x60, 0x1c, 0xb6, 0xae, 0x9b, 0x8e,
	0xb6, 0x33, 0x3c, 0x29, 0x48, 0x95, 0xca, 0x85, 0xfb, 0x3d, 0xdc, 0x2e, 0xb3, 0xed, 0xe4, 0x90,
	0x51, 0x48, 0x3f, 0x44, 0x23, 0xdb, 0x83, 0x68, 0xda, 0x8c, 0xb0, 0x1b, 0xd8, 0x7e, 0x09, 0xa5,
	0x9a, 0x77, 0x91, 0x25, 0xcf, 0x6f, 0x40, 0xa5, 0xd5, 0xbd, 0x74, 0x5a, 0xa1, 0xff, 0x47, 0xcf,
	0x5e, 0x60, 0xa3, 0xa6, 0x41, 0xb3, 0xbb, 0x7a, 0x2e, 0x5d, 0xaf, 0x1a, 0xdf, 0xe7, 0xeb, 0xc7,
	0xb8, 0xa3, 0xbc, 0x7a, 0x22, 0x87, 0x0c, 0x76, 0x97, 0xaf, 0x1f, 0x73, 0x8c, 0x47, 0x9f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xc9, 0xb8, 0xf2, 0x3c, 0x0b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RockRpcServerClient is the client API for RockRpcServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RockRpcServerClient interface {
	Sync(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (RockRpcServer_SyncClient, error)
}

type rockRpcServerClient struct {
	cc *grpc.ClientConn
}

func NewRockRpcServerClient(cc *grpc.ClientConn) RockRpcServerClient {
	return &rockRpcServerClient{cc}
}

func (c *rockRpcServerClient) Sync(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (RockRpcServer_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RockRpcServer_serviceDesc.Streams[0], "/rock.RockRpcServer/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &rockRpcServerSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RockRpcServer_SyncClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type rockRpcServerSyncClient struct {
	grpc.ClientStream
}

func (x *rockRpcServerSyncClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RockRpcServerServer is the server API for RockRpcServer service.
type RockRpcServerServer interface {
	Sync(*StreamRequest, RockRpcServer_SyncServer) error
}

// UnimplementedRockRpcServerServer can be embedded to have forward compatible implementations.
type UnimplementedRockRpcServerServer struct {
}

func (*UnimplementedRockRpcServerServer) Sync(req *StreamRequest, srv RockRpcServer_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

func RegisterRockRpcServerServer(s *grpc.Server, srv RockRpcServerServer) {
	s.RegisterService(&_RockRpcServer_serviceDesc, srv)
}

func _RockRpcServer_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RockRpcServerServer).Sync(m, &rockRpcServerSyncServer{stream})
}

type RockRpcServer_SyncServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type rockRpcServerSyncServer struct {
	grpc.ServerStream
}

func (x *rockRpcServerSyncServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _RockRpcServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rock.RockRpcServer",
	HandlerType: (*RockRpcServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _RockRpcServer_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rock_rpc.proto",
}
